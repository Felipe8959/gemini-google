import imaplib

# Configurações de email
IMAP_SERVER = 'imap.seu_provedor.com'
EMAIL_ACCOUNT = 'seu_email@dominio.com'
EMAIL_PASSWORD = 'sua_senha'

try:
    # Conectar ao servidor de email
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
    
    # Listar pastas disponíveis
    status, folders = mail.list()
    if status == "OK":
        print("Conexão bem-sucedida!")
        print("Pastas disponíveis:")
        for folder in folders:
            print(folder.decode())
    else:
        print("Falha ao listar pastas.")
    
    # Selecionar a caixa de entrada (inbox) para verificar a quantidade de emails
    mail.select("inbox")
    status, message_count = mail.search(None, "ALL")
    if status == "OK":
        print(f"Número total de emails na caixa de entrada: {len(message_count[0].split())}")
    else:
        print("Falha ao contar os emails na caixa de entrada.")

    # Fechar a conexão
    mail.logout()

except imaplib.IMAP4.error as e:
    print(f"Erro ao conectar ao servidor de email: {str(e)}")








import imaplib
import email
from email.header import decode_header
import os
import zipfile
import paramiko

# Configurações de email
IMAP_SERVER = 'imap.seu_provedor.com'
EMAIL_ACCOUNT = 'seu_email@dominio.com'
EMAIL_PASSWORD = 'sua_senha'

# Configurações do diretório compartilhado (via SFTP)
SFTP_HOST = 'sftp.dominio.com'
SFTP_PORT = 22
SFTP_USER = 'usuario_sftp'
SFTP_PASSWORD = 'senha_sftp'
SFTP_DIRECTORY = '/caminho/para/diretorio/compartilhado'

# Conectar ao servidor de email
mail = imaplib.IMAP4_SSL(IMAP_SERVER)
mail.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
mail.select('inbox')

# Buscar emails com o assunto específico
status, messages = mail.search(None, '(SUBJECT "PROT_080_OUV_USUARIOS - Arquivo para VOX")')

# Verificar se encontrou emails
if messages[0]:
    email_ids = messages[0].split()
    latest_email_id = email_ids[-1]  # Pega o email mais recente
    status, msg_data = mail.fetch(latest_email_id, '(RFC822)')
    
    for response_part in msg_data:
        if isinstance(response_part, tuple):
            msg = email.message_from_bytes(response_part[1])
            subject, encoding = decode_header(msg["Subject"])[0]
            if isinstance(subject, bytes):
                subject = subject.decode(encoding if encoding else 'utf-8')
            
            # Procurar o anexo .zip
            for part in msg.walk():
                if part.get_content_maintype() == "multipart":
                    continue
                if part.get('Content-Disposition') is None:
                    continue
                
                filename = part.get_filename()
                if filename and filename.endswith('.zip'):
                    # Salvar o arquivo .zip
                    filepath = os.path.join('/caminho/para/salvar/temp/', filename)
                    with open(filepath, 'wb') as f:
                        f.write(part.get_payload(decode=True))
                    
                    # Descompactar o .zip
                    with zipfile.ZipFile(filepath, 'r') as zip_ref:
                        zip_ref.extractall('/caminho/para/salvar/temp/')
                    
                    # Encontrar o arquivo .txt descompactado
                    for file in os.listdir('/caminho/para/salvar/temp/'):
                        if file.endswith('.txt'):
                            txt_filepath = os.path.join('/caminho/para/salvar/temp/', file)
                            
                            # Conectar ao servidor SFTP e enviar o arquivo
                            transport = paramiko.Transport((SFTP_HOST, SFTP_PORT))
                            transport.connect(username=SFTP_USER, password=SFTP_PASSWORD)
                            sftp = paramiko.SFTPClient.from_transport(transport)
                            sftp.put(txt_filepath, os.path.join(SFTP_DIRECTORY, file))
                            sftp.close()
                            transport.close()
                    
                    # Limpeza: remover arquivos temporários
                    os.remove(filepath)
                    os.remove(txt_filepath)

mail.logout()
