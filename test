import pandas as pd
import re

# Função para remover caracteres não numéricos
def remover_formatacao(doc):
    return re.sub(r'\D', '', str(doc))

# Função para formatar CPF
def formatar_cpf(cpf):
    cpf = remover_formatacao(cpf)
    if len(cpf) == 11:
        return f"{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}"
    return cpf

# Função para formatar CNPJ
def formatar_cnpj(cnpj):
    cnpj = remover_formatacao(cnpj)
    if len(cnpj) == 14:
        return f"{cnpj[:2]}.{cnpj[2:5]}.{cnpj[5:8]}/{cnpj[8:12]}-{cnpj[12:]}"
    return cnpj

# Função para validar CPF
def validar_cpf(cpf):
    cpf = remover_formatacao(cpf)
    if len(cpf) != 11 or cpf in [str(i) * 11 for i in range(10)]:
        return False, None, None
    # Validação do dígito verificador
    primeiro_digito, segundo_digito = None, None
    for i in range(9, 11):
        soma = sum(int(cpf[num]) * ((i + 1) - num) for num in range(i))
        digito = (soma * 10) % 11
        if digito == 10:
            digito = 0
        if i == 9:
            primeiro_digito = digito
        if i == 10:
            segundo_digito = digito
        if digito != int(cpf[i]):
            return False, primeiro_digito, segundo_digito
    return True, primeiro_digito, segundo_digito

# Função para validar CNPJ
def validar_cnpj(cnpj):
    cnpj = remover_formatacao(cnpj)
    if len(cnpj) != 14:
        return False, None, None
    pesos_1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
    pesos_2 = [6] + pesos_1
    # Validação dos dígitos verificadores
    primeiro_digito, segundo_digito = None, None
    for i in range(12, 14):
        soma = sum(int(cnpj[num]) * pesos_1[num] if i == 12 else pesos_2[num] for num in range(i))
        digito = soma % 11
        if digito < 2:
            digito = 0
        else:
            digito = 11 - digito
        if i == 12:
            primeiro_digito = digito
        if i == 13:
            segundo_digito = digito
        if digito != int(cnpj[i]):
            return False, primeiro_digito, segundo_digito
    return True, primeiro_digito, segundo_digito

# Função principal para processar o documento
def processar_documento(doc):
    doc = str(doc)
    doc_sem_formatacao = remover_formatacao(doc)
    if len(doc_sem_formatacao) == 11:  # CPF
        valido, primeiro_digito, segundo_digito = validar_cpf(doc)
        doc_formatado = formatar_cpf(doc)
    elif len(doc_sem_formatacao) == 14:  # CNPJ
        valido, primeiro_digito, segundo_digito = validar_cnpj(doc)
        doc_formatado = formatar_cnpj(doc)
    else:
        valido, primeiro_digito, segundo_digito, doc_formatado = False, None, None, doc
    return {
        "documento_sem_formatacao": doc_sem_formatacao,
        "documento_formatado": doc_formatado,
        "primeiro_digito": primeiro_digito,
        "segundo_digito": segundo_digito,
        "valido": "Sim" if valido else "Não"
    }

# Exemplo de DataFrame
data = {'documentos': ['123.456.789-09', '12.345.678/0001-95', '11111111111', '12345678901234']}
df = pd.DataFrame(data)

# Processando os documentos
resultados = df['documentos'].apply(processar_documento)
resultados_df = pd.DataFrame(resultados.tolist())

# Combinando os resultados com o DataFrame original
df = pd.concat([df, resultados_df], axis=1)

# Exibindo o DataFrame
print(df)
