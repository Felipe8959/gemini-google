# Dicionários globais para armazenar os dados dos analistas
dict_cpf_analista = {}
dict_status_analista = {}
analistas_protocolos = {}  # Armazena a contagem de protocolos por analista

def distribuir_analistas(row):
    status = row['STATUS_VENCIMENTO']
    cpf_cnpj = row['CPF/CNPJ']
    revisao = row['REVISÃO']
    prioridade = row['PRIORIDADE']
    
    # Inicializa a contagem de protocolos por analista se ainda não estiver no dicionário
    if 'DISTRIBUIÇÃO' not in row:
        row['DISTRIBUIÇÃO'] = {}

    for analista in dict_status_analista.get(status, []):
        if analista not in row['DISTRIBUIÇÃO']:
            row['DISTRIBUIÇÃO'][analista] = 0

    # Se o CPF já foi atribuído a um analista, retorne ele
    if cpf_cnpj in dict_cpf_analista:
        return dict_cpf_analista[cpf_cnpj]

    # Função auxiliar para encontrar um analista disponível com menos de 18 protocolos
    def encontrar_analista():
        for analista in dict_status_analista.get(status, []):
            if row['DISTRIBUIÇÃO'][analista] < 18:
                return analista
        return None

    # Distribui igualmente para analistas se a revisão for "Sim"
    if revisao == "Sim" and status in dict_status_analista:
        analista = encontrar_analista()
        if analista:
            dict_cpf_analista[cpf_cnpj] = analista
            row['DISTRIBUIÇÃO'][analista] += 1
            return analista
        else:
            return None  # Não há analista disponível com menos de 18 protocolos

    # Completar com menores prioridades se o número de protocolos for menor que 18
    analista = encontrar_analista()
    if analista:
        dict_cpf_analista[cpf_cnpj] = analista
        row['DISTRIBUIÇÃO'][analista] += 1
        return analista

    # Se não há analista disponível com menos de 18 protocolos, retorna None
    return None

# Exemplo de inicialização de dados
dict_status_analista = {
    'STATUS_1': ['HIGOR', 'PEDRO', 'JOSE', 'RAUL'],
    # Adicione outros status e seus analistas correspondentes conforme necessário
}

# Teste
rows = [
    {'STATUS_VENCIMENTO': 'STATUS_1', 'CPF/CNPJ': str(i), 'REVISÃO': 'Sim', 'PRIORIDADE': i} for i in range(1, 101)
]

for row in rows:
    analista = distribuir_analistas(row)
    print(f"Protocolo {row['CPF/CNPJ']} atribuído a: {analista}")

# Verificação final
for analista in dict_status_analista['STATUS_1']:
    count = sum(row['DISTRIBUIÇÃO'][analista] for row in rows if 'DISTRIBUIÇÃO' in row)
    print(f"{analista} tem {count} protocolos.")
