from pathlib import Path
from datetime import datetime
import shutil
import pandas as pd

# ─── PARAMETRIZAÇÃO ────────────────────────────────────────────────────────────
BASE_DIR      = Path("ENVIADO_A_EMPRESA")            # pasta-raiz já existente
COLETA_DIR    = BASE_DIR / "COLETA_ARQUIVOS"         # onde o .csv chega
SATISF_DIR    = Path("ENVIAR_PESQUISA_SATISF")       # destino da cópia
LOG_FILE      = BASE_DIR / "log_execucoes.xlsx"      # log em Excel
# escolha aqui se quer 1 ou 2 níveis de subpastas ↓
NIVEL_ANO_MES_COMPLETO = True      # 202505
NIVEL_ANO_MES_CURTO    = True      # 2505

def escrever_log(msg:str) -> None:
    """Registra a mensagem em LOG_FILE e imprime na saída."""
    registro = {
        "data_hora_execucao": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "log": msg
    }
    novo = pd.DataFrame([registro])

    if LOG_FILE.exists():
        antigo = pd.read_excel(LOG_FILE)
        df = pd.concat([antigo, novo], ignore_index=True)
    else:
        df = novo

    with pd.ExcelWriter(LOG_FILE, engine="openpyxl", mode="w") as wrt:
        df.to_excel(wrt, index=False)

    print(msg)                # feedback imediato no notebook

def criar_pasta_alvo(data_exec:datetime) -> Path:
    """
    Cria (caso necessário) e devolve o caminho da subpasta destino onde o .csv será
    movido. Pode gerar um ou dois níveis, conforme as flags de parametrização.
    Ex.: ENVIADO_A_EMPRESA/202505/2505
    """
    caminho = BASE_DIR
    if NIVEL_ANO_MES_COMPLETO:
        caminho = caminho / data_exec.strftime("%Y%m")
    if NIVEL_ANO_MES_CURTO:
        caminho = caminho / data_exec.strftime("%y%m")

    if not caminho.exists():
        caminho.mkdir(parents=True, exist_ok=True)
        escrever_log(f"Pasta criada: {caminho}")
    else:
        escrever_log(f"Pasta já existia: {caminho}")

    return caminho

def mover_e_copiar_csv_do_dia() -> None:
    hoje = datetime.now()
    sufixo = hoje.strftime("%Y_%m_%d")          # 'yyyy_mm_dd'
    candidatos = list(COLETA_DIR.glob(f"*{sufixo}.csv"))

    if not candidatos:
        escrever_log(f"Nenhum .csv com sufixo {sufixo} encontrado em {COLETA_DIR}.")
        return

    destino_final = criar_pasta_alvo(hoje)      # cria/obtém pasta-alvo

    for csv in candidatos:
        destino_arquivo = destino_final / csv.name

        # ─── MOVER ────────────────────────────────────────────────────────────
        if destino_arquivo.exists():
            escrever_log(f"Arquivo já existente em {destino_final}: {csv.name} – não movido.")
        else:
            shutil.move(csv, destino_arquivo)
            escrever_log(f"Movido {csv.name} → {destino_final}")

        # ─── COPIAR PARA ENVIAR_PESQUISA_SATISF ──────────────────────────────
        try:
            SATISF_DIR.mkdir(parents=True, exist_ok=True)
            copia = SATISF_DIR / csv.name
            shutil.copy2(destino_arquivo, copia)
            escrever_log(f"Cópia enviada para {SATISF_DIR}: {csv.name}")
        except Exception as exc:
            escrever_log(f"Erro ao copiar {csv.name} para {SATISF_DIR}: {exc}")

mover_e_copiar_csv_do_dia()
