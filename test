import pandas as pd
import pyodbc

# Função para conectar ao banco Access
def connect_to_access_database(access_file):
    conn_str = (
        r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
        r'DBQ=' + access_file + ';'
    )
    conn = pyodbc.connect(conn_str)
    return conn.cursor()

# Função para verificar se uma linha já existe no banco de dados
def row_exists_in_database(cursor, table_name, column_name, value):
    query = f"SELECT COUNT(*) FROM {table_name} WHERE {column_name} = ?"
    cursor.execute(query, value)
    return cursor.fetchone()[0] > 0

# Função para inserir uma linha no banco de dados
def insert_row_to_database(cursor, table_name, columns, values):
    columns_str = ', '.join(columns)
    placeholders = ', '.join(['?'] * len(columns))
    query = f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})"
    cursor.execute(query, values)

# DataFrame existente
data = {
    'Nome': ['João', 'Maria', 'Pedro'],
    'Idade': [30, 25, 35]
}
df = pd.DataFrame(data)

# Conectar ao banco Access
access_file = 'caminho_para_o_seu_banco_de_dados.accdb'
cursor = connect_to_access_database(access_file)

# Informações do banco de dados
table_name = 'sua_tabela'
id_column = 'id'  # Suponha que você tenha uma coluna ID única para cada registro no banco de dados

# Iterar sobre as linhas do DataFrame e inserir no banco de dados se não existir
for index, row in df.iterrows():
    if not row_exists_in_database(cursor, table_name, 'Nome', row['Nome']):
        insert_row_to_database(cursor, table_name, ['Nome', 'Idade'], [row['Nome'], row['Idade']])

# Commit as alterações
cursor.commit()

# Fechar a conexão
cursor.close()
