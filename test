def distribuir_casos_especificos(df, analistas, filtro_coluna, filtro_valor, analista_coluna, valores_qualidade=None, situacoes=None):
    # Se o filtro_valor não for uma lista, converta para lista
    if not isinstance(filtro_valor, list):
        filtro_valor = [filtro_valor]
    
    # Filtrar os analistas que possuem 'X' na coluna de qualidade
    analistas_filtrados = analistas[analistas[analista_coluna].str.contains('X', case=False, na=False)]['ANALISTA'].values

    # Filtrar os casos que precisam ser distribuídos com base na coluna 'DISTRIBUICAO' vazia
    df_demandas_distribuir = df[(df['DISTRIBUICAO'].isnull()) | (df['DISTRIBUICAO'] == "")]

    # Obter os índices dos casos que atendem aos filtros específicos (juncao e situacao)
    indices = df_demandas_distribuir[
        (df_demandas_distribuir[filtro_coluna].isin(filtro_valor)) &
        (df_demandas_distribuir['SITUACAO DA MANIFESTACAO'].isin(situacoes))
    ].index

    # Distribuir os casos específicos entre os analistas filtrados
    for i, idx in enumerate(indices):
        df.at[idx, 'DISTRIBUICAO'] = analistas_filtrados[i % len(analistas_filtrados)]

    return df



# Supondo que df_analistas já está carregado com os dados do arquivo 'ANALISTAS.xlsx'
df_analistas = pd.read_excel('PARAMETROS/ANALISTAS.xlsx')

# Chamando a função com os dados específicos
df_base_cruzamento_enriq = distribuir_casos_especificos(
    df_base_cruzamento_enriq,
    df_analistas,
    'JUNCAO RESPONSAVEL', 
    juncoes_qualidade,
    'ANALISTAS QUALIDADE', 
    valores_qualidade=juncoes_qualidade, 
    situacoes=casos_analistas_qualidade
)
