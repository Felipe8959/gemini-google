# Dicionários globais para armazenar os dados dos analistas
dict_cpf_analista = {}
dict_status_analista = {}
analistas_protocolos = {}  # Armazena a contagem de protocolos por analista

def distribuir_analistas(row):
    status = row['STATUS_VENCIMENTO']
    cpf_cnpj = row['CPF/CNPJ']
    revisao = row['REVISÃO']
    prioridade = row['PRIORIDADE']

    # Inicializa a contagem de protocolos por analista se ainda não estiver no dicionário
    for analista in dict_status_analista.get(status, []):
        if analista not in analistas_protocolos:
            analistas_protocolos[analista] = 0

    # Se o CPF já foi atribuído a um analista, retorne ele
    if cpf_cnpj in dict_cpf_analista:
        return dict_cpf_analista[cpf_cnpj]

    # Distribui igualmente para analistas se a revisão for "Sim"
    if revisao == "Sim" and status in dict_status_analista:
        analistas = dict_status_analista[status]
        analista = analistas.pop(0)
        analistas.append(analista)  # Coloca o analista no final da lista para a próxima vez
        dict_cpf_analista[cpf_cnpj] = analista
        analistas_protocolos[analista] += 1
        return analista

    # Caso o número de protocolos distribuídos seja menor que 18, completar com prioridades menores
    if status in dict_status_analista:
        analistas = dict_status_analista[status]
        analistas.sort(key=lambda a: analistas_protocolos[a])  # Ordena analistas pelo número de protocolos
        for analista in analistas:
            if analistas_protocolos[analista] < 18:
                dict_cpf_analista[cpf_cnpj] = analista
                analistas_protocolos[analista] += 1
                return analista

    # Se não há analista disponível com menos de 18 protocolos, retorna None
    return None

# Exemplo de uso:
# row = {'STATUS_VENCIMENTO': '...', 'CPF/CNPJ': '...', 'REVISÃO': 'Sim', 'PRIORIDADE': '...'}
# analista = distribuir_analistas(row)
